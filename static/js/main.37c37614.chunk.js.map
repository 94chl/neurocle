{"version":3,"sources":["component/Tool/Tool.module.scss","component/Button/Button.module.scss","component/Canvas/Canvas.module.scss","App.module.scss","store/canvas/canvas.js","hook/useLocalStorage.js","component/Canvas/Canvas.js","component/Tool/Tool.js","component/Button/Button.js","component/CustomInput/CustomInput.js","App.js","reportWebVitals.js","store/index.js","index.js"],"names":["module","exports","canvas","createSlice","name","initialState","shapeType","strokeColor","strokeWidth","fillColor","shapes","layersHistory","layersNow","reducers","seShapeType","state","payload","setColor","target","value","setStrokeWidth","setShapes","setLayersHitory","setLayersNow","useLocalStorage","key","initialValue","useState","JSON","parse","localStorage","getItem","storedValue","setStoredValue","valueToStore","setItem","stringify","container","styles","stage","Canvas","width","height","canvasContainer","setCanvasContainer","canvasRef","useRef","useEffect","current","clientWidth","clientHeight","canvasResize","window","addEventListener","removeEventListener","dispatch","useDispatch","useSelector","store","storedLayersHistory","setStoredLayersHistory","storedLayersNow","setStoredLayersNow","length","actions","shapePoints","setShapePoints","type","x","y","points","shape","setShape","isDrawing","setIsDrawing","isStitching","setIsStitching","includes","onSetStartPoint","e","pageX","pageY","initializeShape","finishAdjustShape","isReset","newShapes","newLayersHistory","filter","_","index","newShape","slice","push","className","classNames","ref","onMouseDown","onMouseUp","onClick","onMouseMove","Math","abs","onAdjustShape","onDoubleClick","onKeyDown","tabIndex","map","stroke","tension","fill","closed","shapeButtonBox","customInputBox","controlButtonBox","Tool","fillColorTransparency","setFillColorTransparency","tempFillColor","setTempFillColr","setShapeButton","onChangeColor","isActive","CustomInput","inputId","onChange","inputOption","parseInt","onChangeStrokeWidth","min","max","checked","onChangeFillColorOpacity","prevIndex","isDisable","nextIndex","clearShapes","confirm","button","active","disable","Button","style","children","disabled","Input","htmlFor","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37c37614.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Tool_container__1Szw6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__17x3e\",\"active\":\"Button_active__15qMB\",\"disable\":\"Button_disable__M3pI4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Canvas_container__1Vfbb\",\"stage\":\"Canvas_stage__35f8o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\"};","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const canvas = createSlice({\n  name: \"canvas\",\n  initialState: {\n    shapeType: \"rect\",\n    strokeColor: \"#000000\",\n    strokeWidth: 5,\n    fillColor: \"#000000\",\n    shapes: [],\n    layersHistory: [],\n    layersNow: -1,\n  },\n  reducers: {\n    seShapeType: (state, { payload }) => {\n      state.shapeType = payload;\n    },\n    setColor: (state, { payload }) => {\n      state[payload.target] = payload.value;\n    },\n    setStrokeWidth: (state, { payload }) => {\n      state.strokeWidth = payload;\n    },\n    setShapes: (state, { payload }) => {\n      state.shapes = payload;\n    },\n    setLayersHitory: (state, { payload }) => {\n      state.layersHistory = payload;\n    },\n    setLayersNow: (state, { payload }) => {\n      state.layersNow = payload;\n    },\n  },\n});\n","import { useState } from \"react\";\n\nconst useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(\n    () => JSON.parse(localStorage.getItem(key)) || initialValue\n  );\n\n  const setValue = (value) => {\n    const valueToStore =\n      typeof value === \"function\" ? value(storedValue) : value;\n    setStoredValue(valueToStore);\n    localStorage.setItem(key, JSON.stringify(valueToStore));\n  };\n\n  return [storedValue, setValue];\n};\n\nexport default useLocalStorage;\n","/* eslint-disable array-callback-return */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useRef, useState, useEffect } from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./Canvas.module.scss\";\nimport { Stage, Layer, Rect, Ellipse, Line } from \"react-konva\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { canvas } from \"@/store/canvas/canvas\";\nimport { useLocalStorage } from \"@/hook\";\n\nconst { container, stage } = styles;\n\nconst layersHistoryLimit = 3;\n\nconst Canvas = () => {\n  const [canvasContainer, setCanvasContainer] = useState({\n    width: 0,\n    height: 0,\n  });\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      setCanvasContainer({\n        width: canvasRef.current.clientWidth,\n        height: canvasRef.current.clientHeight,\n      });\n    }\n\n    const canvasResize = () => {\n      setCanvasContainer({\n        width: canvasRef.current.clientWidth,\n        height: canvasRef.current.clientHeight,\n      });\n    };\n\n    window.addEventListener(\"resize\", canvasResize);\n    return () => window.removeEventListener(\"resize\", canvasResize);\n  }, [canvasRef]);\n\n  const dispatch = useDispatch();\n  const {\n    shapeType,\n    strokeColor,\n    strokeWidth,\n    fillColor,\n    shapes,\n    layersHistory,\n    layersNow,\n  } = useSelector((store) => store.canvas);\n\n  const [storedLayersHistory, setStoredLayersHistory] = useLocalStorage(\n    \"storedLayersHistory\",\n    []\n  );\n  const [storedLayersNow, setStoredLayersNow] = useLocalStorage(\n    \"storedLayersNow\",\n    []\n  );\n\n  useEffect(() => {\n    if (!layersHistory.length && storedLayersHistory.length > 0) {\n      dispatch(canvas.actions.setLayersHitory(storedLayersHistory));\n      dispatch(canvas.actions.setLayersNow(storedLayersNow));\n      dispatch(\n        canvas.actions.setShapes(\n          storedLayersNow < 0 ? [] : storedLayersHistory[storedLayersNow]\n        )\n      );\n    }\n  }, []);\n\n  const [shapePoints, setShapePoints] = useState([]);\n  const [shape, setShape] = useState({\n    type: shapeType,\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    points: [],\n    strokeColor,\n    strokeWidth,\n    fillColor,\n  });\n\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isStitching, setIsStitching] = useState(false);\n\n  useEffect(() => {\n    [\"spline\", \"polygon\"].includes(shapeType)\n      ? setIsStitching(true)\n      : setIsStitching(false);\n  }, [shapeType]);\n\n  const onSetStartPoint = (e) => {\n    setShapePoints([...shapePoints, e.pageX, e.pageY]);\n    setIsDrawing(true);\n  };\n\n  const onAdjustShape = (e) => {\n    setShapePoints([\n      ...shapePoints.slice(\n        0,\n        shapePoints.length > 2 ? shapePoints.length - 2 : 2\n      ),\n      e.pageX,\n      e.pageY,\n    ]);\n\n    const width = shapePoints[0] - shapePoints[shapePoints.length - 2];\n    const height = shapePoints[1] - shapePoints[shapePoints.length - 1];\n    const x = width < 0 ? shapePoints[0] : shapePoints[shapePoints.length - 2];\n    const y = height < 0 ? shapePoints[1] : shapePoints[shapePoints.length - 1];\n\n    const newShape = {\n      type: shapeType,\n      x: shapeType === \"ellipse\" ? x + Math.abs(width) / 2 : x,\n      y: shapeType === \"ellipse\" ? y + Math.abs(height) / 2 : y,\n      width: Math.abs(width),\n      height: Math.abs(height),\n      points: [...shapePoints],\n      strokeColor,\n      strokeWidth,\n      fillColor,\n    };\n\n    setShape(newShape);\n  };\n\n  const initializeShape = () => {\n    setShape({\n      type: shapeType,\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      points: [],\n      strokeColor,\n      strokeWidth,\n      fillColor,\n    });\n    setShapePoints([]);\n    setIsDrawing(false);\n  };\n\n  const finishAdjustShape = (isReset) => {\n    if (isReset && !isStitching) {\n      initializeShape();\n      return;\n    }\n\n    const newShapes = [...shapes];\n\n    const newLayersHistory =\n      layersNow <= layersHistoryLimit\n        ? layersHistory.filter((_, index) => index <= layersNow)\n        : layersHistory.filter(\n            (_, index) => index > 0 && index < layersHistoryLimit\n          );\n\n    if (isReset && isStitching) {\n      const newShape = {\n        ...shape,\n        points: shapePoints.slice(0, shapePoints.length - 2),\n      };\n      newShapes.push(newShape);\n    } else {\n      newShapes.push(shape);\n    }\n\n    dispatch(canvas.actions.setShapes(newShapes));\n\n    newLayersHistory.push(newShapes);\n    setStoredLayersHistory(newLayersHistory);\n    dispatch(canvas.actions.setLayersHitory(newLayersHistory));\n\n    setStoredLayersNow(layersNow + 1);\n    dispatch(canvas.actions.setLayersNow(layersNow + 1));\n\n    initializeShape();\n  };\n\n  return (\n    <div\n      className={classNames(container)}\n      ref={canvasRef}\n      onMouseDown={(e) => !isStitching && onSetStartPoint(e)}\n      onMouseUp={() => !isStitching && finishAdjustShape(false)}\n      onClick={(e) => isStitching && onSetStartPoint(e)}\n      onMouseMove={(e) => isDrawing && onAdjustShape(e)}\n      onDoubleClick={() => isStitching && finishAdjustShape(false)}\n      onKeyDown={(e) => e.key === \"Escape\" && finishAdjustShape(true)}\n      tabIndex=\"0\"\n    >\n      <Stage\n        className={classNames(stage)}\n        width={canvasContainer.width}\n        height={canvasContainer.height}\n      >\n        <Layer>\n          {shapes.map((shape, index) => {\n            if (shape.type === \"line\") {\n              return (\n                <Line\n                  stroke={shape.strokeColor}\n                  strokeWidth={shape.strokeWidth}\n                  points={shape.points}\n                  key={`${shape.type}-${index}`}\n                ></Line>\n              );\n            }\n            if (shape.type === \"spline\") {\n              return (\n                <Line\n                  stroke={shape.strokeColor}\n                  strokeWidth={shape.strokeWidth}\n                  points={shape.points}\n                  tension={0.5}\n                  key={`${shape.type}-${index}`}\n                ></Line>\n              );\n            }\n            if (shape.type === \"ellipse\") {\n              return (\n                <Ellipse\n                  fill={shape.fillColor}\n                  stroke={shape.strokeColor}\n                  strokeWidth={shape.strokeWidth}\n                  x={shape.x}\n                  y={shape.y}\n                  width={shape.width}\n                  height={shape.height}\n                  key={`${shape.type}-${index}`}\n                ></Ellipse>\n              );\n            }\n            if (shape.type === \"rect\") {\n              return (\n                <Rect\n                  fill={shape.fillColor}\n                  stroke={shape.strokeColor}\n                  strokeWidth={shape.strokeWidth}\n                  x={shape.x}\n                  y={shape.y}\n                  width={shape.width}\n                  height={shape.height}\n                  key={`${shape.type}-${index}`}\n                ></Rect>\n              );\n            }\n            if (shape.type === \"polygon\") {\n              return (\n                <Line\n                  fill={shape.fillColor}\n                  stroke={shape.strokeColor}\n                  strokeWidth={shape.strokeWidth}\n                  points={shape.points}\n                  closed={true}\n                  key={`${shape.type}-${index}`}\n                ></Line>\n              );\n            }\n          })}\n          {shapeType === \"line\" && (\n            <Line\n              stroke={strokeColor}\n              strokeWidth={strokeWidth}\n              points={shape.points}\n            ></Line>\n          )}\n          {shapeType === \"spline\" && (\n            <Line\n              stroke={strokeColor}\n              strokeWidth={strokeWidth}\n              points={shapePoints}\n              tension={0.5}\n            ></Line>\n          )}\n          {shapeType === \"ellipse\" && (\n            <Ellipse\n              fill={fillColor}\n              stroke={strokeColor}\n              strokeWidth={strokeWidth}\n              x={shape.x}\n              y={shape.y}\n              width={shape.width}\n              height={shape.height}\n            ></Ellipse>\n          )}\n          {shapeType === \"rect\" && (\n            <Rect\n              stroke={strokeColor}\n              strokeWidth={strokeWidth}\n              fill={fillColor}\n              x={shape.x}\n              y={shape.y}\n              width={shape.width}\n              height={shape.height}\n            ></Rect>\n          )}\n          {shapeType === \"polygon\" && (\n            <Line\n              fill={fillColor}\n              stroke={strokeColor}\n              strokeWidth={strokeWidth}\n              points={shapePoints}\n              closed={true}\n            ></Line>\n          )}\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default Canvas;\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./Tool.module.scss\";\nimport { Button, CustomInput } from \"@/component\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { canvas } from \"@/store/canvas/canvas\";\nimport { useLocalStorage } from \"@/hook\";\n\nconst { container, shapeButtonBox, customInputBox, controlButtonBox } = styles;\n\nconst Tool = () => {\n  const dispatch = useDispatch();\n  const {\n    shapes,\n    shapeType,\n    strokeColor,\n    strokeWidth,\n    fillColor,\n    layersHistory,\n    layersNow,\n  } = useSelector((store) => store.canvas);\n  const [fillColorTransparency, setFillColorTransparency] = useState(true);\n  const [tempFillColor, setTempFillColr] = useState(fillColor);\n\n  useEffect(() => {\n    if (fillColorTransparency) {\n      dispatch(\n        canvas.actions.setColor({\n          target: \"fillColor\",\n          value: \"transparent\",\n        })\n      );\n    } else {\n      dispatch(\n        canvas.actions.setColor({\n          target: \"fillColor\",\n          value: tempFillColor,\n        })\n      );\n    }\n  }, [fillColorTransparency]);\n\n  const [storedLayersHistory, setStoredLayersHistory] = useLocalStorage(\n    \"storedLayersHistory\",\n    []\n  );\n  const [storedLayersNow, setStoredLayersNow] = useLocalStorage(\n    \"storedLayersNow\",\n    []\n  );\n\n  const setShapeButton = (type) => {\n    dispatch(canvas.actions.seShapeType(type));\n  };\n\n  const onChangeColor = (e, target) => {\n    setTempFillColr(e.target.value);\n    if (!fillColorTransparency) {\n      dispatch(canvas.actions.setColor({ target, value: e.target.value }));\n    }\n  };\n\n  const onChangeFillColorOpacity = (e) => {\n    setFillColorTransparency(e.target.checked);\n  };\n\n  const onChangeStrokeWidth = (e) => {\n    const value = parseInt(e.target.value);\n    dispatch(\n      canvas.actions.setStrokeWidth(value > 50 ? 50 : value < 5 ? 5 : value)\n    );\n  };\n\n  const undo = () => {\n    const prevIndex =\n      layersNow >= 0\n        ? layersNow > layersHistory.length - 1\n          ? layersHistory.length - 1\n          : layersNow - 1\n        : -1;\n\n    setStoredLayersNow(prevIndex);\n    dispatch(canvas.actions.setLayersNow(prevIndex));\n    dispatch(\n      canvas.actions.setShapes(prevIndex > -1 ? layersHistory[prevIndex] : [])\n    );\n  };\n\n  const redo = () => {\n    const nextIndex =\n      layersNow < layersHistory.length - 1\n        ? layersNow + 1\n        : layersHistory.length - 1;\n\n    setStoredLayersNow(nextIndex);\n    dispatch(canvas.actions.setLayersNow(nextIndex));\n    dispatch(\n      canvas.actions.setShapes(nextIndex > -1 ? layersHistory[nextIndex] : [])\n    );\n  };\n\n  const clearShapes = () => {\n    const newLayersHistory = layersHistory.filter(\n      (_, index) => index <= layersNow\n    );\n    newLayersHistory.push([]);\n\n    dispatch(canvas.actions.setShapes([]));\n    dispatch(canvas.actions.setLayersHitory(newLayersHistory));\n    setStoredLayersHistory(newLayersHistory);\n    dispatch(canvas.actions.setLayersNow(layersNow + 1));\n    setStoredLayersNow(layersNow + 1);\n  };\n\n  const resetLayers = () => {\n    if (window.confirm(\"초기화 하시겠습니까?\")) {\n      dispatch(canvas.actions.setShapes([]));\n      dispatch(canvas.actions.setLayersHitory([]));\n      setStoredLayersHistory([]);\n      dispatch(canvas.actions.setLayersNow(-1));\n      setStoredLayersNow(-1);\n    }\n  };\n\n  return (\n    <div className={classNames(container)}>\n      <div className={classNames(shapeButtonBox)}>\n        <Button\n          onClick={() => setShapeButton(\"line\")}\n          isActive={shapeType === \"line\"}\n        >\n          직선\n        </Button>\n        <Button\n          onClick={() => setShapeButton(\"spline\")}\n          isActive={shapeType === \"spline\"}\n        >\n          곡선\n        </Button>\n        <Button\n          onClick={() => setShapeButton(\"ellipse\")}\n          isActive={shapeType === \"ellipse\"}\n        >\n          원\n        </Button>\n        <Button\n          onClick={() => setShapeButton(\"rect\")}\n          isActive={shapeType === \"rect\"}\n        >\n          직사각형\n        </Button>\n        <Button\n          onClick={() => setShapeButton(\"polygon\")}\n          isActive={shapeType === \"polygon\"}\n        >\n          다각형\n        </Button>\n      </div>\n      <div className={classNames(customInputBox)}>\n        <CustomInput\n          inputId=\"strokeColor\"\n          onChange={(e) => onChangeColor(e, \"strokeColor\")}\n          value={strokeColor}\n          inputOption={{ type: \"color\" }}\n        >\n          테두리 색상\n        </CustomInput>\n      </div>\n      <div>\n        <CustomInput\n          inputId=\"strokeWidth\"\n          onChange={(e) => onChangeStrokeWidth(e)}\n          value={strokeWidth}\n          inputOption={{ type: \"number\", min: 5, max: 50 }}\n        >\n          테두리 두께\n        </CustomInput>\n        <CustomInput\n          inputId=\"fillColor\"\n          onChange={(e) => onChangeColor(e, \"fillColor\")}\n          value={fillColor === \"transparent\" ? tempFillColor : fillColor}\n          inputOption={{ type: \"color\" }}\n        >\n          채우기 색상\n        </CustomInput>\n        <CustomInput\n          inputId=\"fillColorTransparency\"\n          onChange={(e) => onChangeFillColorOpacity(e)}\n          value={0}\n          inputOption={{ type: \"checkbox\", checked: fillColorTransparency }}\n        >\n          채우기 없음\n        </CustomInput>\n      </div>\n      <div className={classNames(controlButtonBox)}>\n        <Button onClick={undo} isActive={false} isDisable={layersNow < 0}>\n          undo\n        </Button>\n        <Button\n          onClick={redo}\n          isActive={false}\n          isDisable={layersNow >= layersHistory.length - 1}\n        >\n          redo\n        </Button>\n        <Button\n          onClick={() => shapes.length && clearShapes()}\n          isActive={false}\n          isDisable={!shapes.length}\n        >\n          clear\n        </Button>\n        <Button onClick={resetLayers} isActive={false}>\n          reset\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Tool;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./Button.module.scss\";\n\nconst { button, active, disable } = styles;\n\nconst Button = ({ onClick, isActive, isDisable, style, children }) => {\n  return (\n    <button\n      onClick={onClick}\n      className={classNames(button, {\n        [active]: isActive,\n        [disable]: isDisable,\n      })}\n      disabled={isDisable}\n      style={style}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./CustomInput.module.scss\";\n\nconst { container } = styles;\n\nconst Input = ({ style, inputOption, inputId, onChange, value, children }) => {\n  return (\n    <div className={classNames(container)} style={style}>\n      <label htmlFor={inputId}>{children}</label>\n      <input id={inputId} onChange={onChange} value={value} {...inputOption} />\n    </div>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./App.module.scss\";\nimport { Canvas, Tool } from \"@/component\";\n\nconst { container } = styles;\n\nfunction App() {\n  return (\n    <div className={classNames(container)}>\n      <Canvas></Canvas>\n      <Tool></Tool>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { canvas } from \"./canvas/canvas\";\n\nexport const store = configureStore({\n  reducer: {\n    canvas: canvas.reducer,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"@/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}