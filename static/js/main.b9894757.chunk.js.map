{"version":3,"sources":["component/Tool/Tool.module.scss","component/Button/Button.module.scss","component/Canvas/Canvas.module.scss","App.module.scss","component/CustomInput/CustomInput.module.scss","store/canvas/canvas.js","hook/useLocalStorage.js","component/Canvas/Canvas.js","component/Tool/Tool.js","component/Button/Button.js","component/CustomInput/CustomInput.js","App.js","reportWebVitals.js","store/index.js","index.js"],"names":["module","exports","canvas","createSlice","name","initialState","shapeType","strokeColor","strokeWidth","fillColor","fillColorTransparency","shapes","layersHistory","layersNow","layersHistoryLimit","reducers","seShapeType","state","payload","setColor","target","value","setFillColorTransparency","setStrokeWidth","setShapes","setLayersHitory","setLayersNow","useLocalStorage","key","initialValue","useState","JSON","parse","localStorage","getItem","storedValue","setStoredValue","valueToStore","setItem","stringify","container","styles","stage","Canvas","width","height","canvasContainer","setCanvasContainer","canvasRef","useRef","useEffect","current","clientWidth","clientHeight","canvasResize","window","addEventListener","removeEventListener","dispatch","useDispatch","useSelector","store","storedLayersHistory","setStoredLayersHistory","storedLayersNow","setStoredLayersNow","length","actions","shapePoints","setShapePoints","type","x","y","points","shape","setShape","isDrawing","isStitching","includes","onSetPoint","e","pageX","pageY","initializeShape","finishAdjustShape","isReset","newShapes","newLayersHistory","filter","_","index","newShape","slice","push","nextIndex","className","classNames","ref","onMouseDown","button","onMouseUp","onClick","onMouseMove","Math","abs","onAdjustShape","onDoubleClick","onKeyDown","tabIndex","map","stroke","tension","fill","closed","shapeButtonBox","customInputBox","controlButtonBox","guideBox","Tool","setShapeButton","onChangeColor","isActive","CustomInput","inputId","onChange","inputOption","parseInt","onChangeStrokeWidth","min","max","checked","prevIndex","isDisable","clearShapes","confirm","active","disable","Button","style","children","disabled","Input","htmlFor","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9894757.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Tool_container__1Szw6\",\"shapeButtonBox\":\"Tool_shapeButtonBox__3ZrH2\",\"customInputBox\":\"Tool_customInputBox__5O10G\",\"controlButtonBox\":\"Tool_controlButtonBox__1dCPk\",\"guideBox\":\"Tool_guideBox__1njCz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__17x3e\",\"active\":\"Button_active__15qMB\",\"disable\":\"Button_disable__M3pI4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Canvas_container__1Vfbb\",\"stage\":\"Canvas_stage__35f8o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CustomInput_container__1QDtG\"};","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const canvas = createSlice({\n  name: \"canvas\",\n  initialState: {\n    shapeType: \"rect\",\n    strokeColor: \"#000000\",\n    strokeWidth: 5,\n    fillColor: \"#000000\",\n    fillColorTransparency: true,\n    shapes: [],\n    layersHistory: [],\n    layersNow: -1,\n    layersHistoryLimit: 40,\n  },\n  reducers: {\n    seShapeType: (state, { payload }) => {\n      state.shapeType = payload;\n    },\n    setColor: (state, { payload }) => {\n      state[payload.target] = payload.value;\n    },\n    setFillColorTransparency: (state) => {\n      state.fillColorTransparency = !state.fillColorTransparency;\n    },\n    setStrokeWidth: (state, { payload }) => {\n      state.strokeWidth = payload;\n    },\n    setShapes: (state, { payload }) => {\n      state.shapes = payload;\n    },\n    setLayersHitory: (state, { payload }) => {\n      state.layersHistory = payload;\n    },\n    setLayersNow: (state, { payload }) => {\n      state.layersNow = payload;\n    },\n  },\n});\n","import { useState } from \"react\";\n\nconst useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    const value = JSON.parse(localStorage.getItem(key));\n    return !value ? initialValue : value;\n  });\n\n  const setValue = (value) => {\n    const valueToStore =\n      typeof value === \"function\" ? value(storedValue) : value;\n    setStoredValue(valueToStore);\n    localStorage.setItem(key, JSON.stringify(valueToStore));\n  };\n\n  return [storedValue, setValue];\n};\n\nexport default useLocalStorage;\n","/* eslint-disable array-callback-return */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useRef, useState, useEffect } from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./Canvas.module.scss\";\nimport { Stage, Layer, Rect, Ellipse, Line } from \"react-konva\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { canvas } from \"@/store/canvas/canvas\";\nimport { useLocalStorage } from \"@/hook\";\n\nconst { container, stage } = styles;\n\nconst Canvas = () => {\n  const [canvasContainer, setCanvasContainer] = useState({\n    width: 0,\n    height: 0,\n  });\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      setCanvasContainer({\n        width: canvasRef.current.clientWidth,\n        height: canvasRef.current.clientHeight,\n      });\n    }\n\n    const canvasResize = () => {\n      setCanvasContainer({\n        width: canvasRef.current.clientWidth,\n        height: canvasRef.current.clientHeight,\n      });\n    };\n\n    window.addEventListener(\"resize\", canvasResize);\n    return () => window.removeEventListener(\"resize\", canvasResize);\n  }, []);\n\n  const dispatch = useDispatch();\n  const {\n    shapes,\n    shapeType,\n    strokeColor,\n    strokeWidth,\n    fillColor,\n    fillColorTransparency,\n    layersHistory,\n    layersNow,\n    layersHistoryLimit,\n  } = useSelector((store) => store.canvas);\n\n  const [storedLayersHistory, setStoredLayersHistory] = useLocalStorage(\n    \"storedLayersHistory\",\n    []\n  );\n  const [storedLayersNow, setStoredLayersNow] = useLocalStorage(\n    \"storedLayersNow\",\n    -1\n  );\n\n  useEffect(() => {\n    if (storedLayersHistory[storedLayersNow] < 0)\n      setStoredLayersNow(storedLayersHistory.length - 1);\n\n    if (!layersHistory.length && storedLayersHistory.length) {\n      dispatch(canvas.actions.setLayersHitory(storedLayersHistory));\n      dispatch(canvas.actions.setLayersNow(storedLayersNow));\n      dispatch(\n        canvas.actions.setShapes(\n          !storedLayersHistory[storedLayersNow]\n            ? []\n            : storedLayersHistory[storedLayersNow]\n        )\n      );\n    }\n  }, []);\n\n  const [shapePoints, setShapePoints] = useState([]);\n  const [shape, setShape] = useState({\n    type: shapeType,\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    points: [],\n    strokeColor,\n    strokeWidth,\n    fillColor,\n    fillColorTransparency,\n  });\n\n  const isDrawing = useRef(false);\n  const isStitching = useRef(false);\n\n  useEffect(() => {\n    isStitching.current = [\"spline\", \"polygon\"].includes(shapeType)\n      ? true\n      : false;\n  }, [shapeType]);\n\n  const onSetPoint = (e) => {\n    setShapePoints([...shapePoints, e.pageX, e.pageY]);\n    isDrawing.current = true;\n  };\n\n  const onAdjustShape = (e) => {\n    setShapePoints([\n      ...shapePoints.slice(\n        0,\n        shapePoints.length > 2 ? shapePoints.length - 2 : 2\n      ),\n      e.pageX,\n      e.pageY,\n    ]);\n\n    const width = shapePoints[0] - shapePoints[shapePoints.length - 2];\n    const height = shapePoints[1] - shapePoints[shapePoints.length - 1];\n    const x = width < 0 ? shapePoints[0] : shapePoints[shapePoints.length - 2];\n    const y = height < 0 ? shapePoints[1] : shapePoints[shapePoints.length - 1];\n\n    const newShape = {\n      type: shapeType,\n      x: shapeType === \"ellipse\" ? x + Math.abs(width) / 2 : x,\n      y: shapeType === \"ellipse\" ? y + Math.abs(height) / 2 : y,\n      width: Math.abs(width),\n      height: Math.abs(height),\n      points: [...shapePoints],\n      strokeColor,\n      strokeWidth,\n      fillColor,\n      fillColorTransparency,\n    };\n\n    setShape(newShape);\n  };\n\n  const initializeShape = () => {\n    setShape({\n      type: shapeType,\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      points: [],\n      strokeColor,\n      strokeWidth,\n      fillColor,\n      fillColorTransparency,\n    });\n    setShapePoints([]);\n    isDrawing.current = !isDrawing.current;\n  };\n\n  const finishAdjustShape = (isReset) => {\n    if (isReset && !isStitching.current) {\n      initializeShape();\n      return;\n    }\n\n    const newShapes = [...shapes];\n    const newLayersHistory =\n      layersNow < layersHistoryLimit - 1\n        ? layersHistory.filter((_, index) => index <= layersNow)\n        : layersHistory.filter(\n            (_, index) =>\n              layersHistory.length - layersHistoryLimit + 1 <= index &&\n              index < layersHistoryLimit\n          );\n    if (isReset && isStitching.current) {\n      const newShape = {\n        ...shape,\n        points: shapePoints.slice(0, shapePoints.length - 2),\n      };\n      newShapes.push(newShape);\n    } else {\n      newShapes.push(shape);\n    }\n\n    dispatch(canvas.actions.setShapes(newShapes));\n\n    newLayersHistory.push(newShapes);\n    setStoredLayersHistory(newLayersHistory);\n    dispatch(canvas.actions.setLayersHitory(newLayersHistory));\n\n    const nextIndex =\n      layersNow + 1 < layersHistoryLimit - 1\n        ? layersNow + 1\n        : layersHistoryLimit - 1;\n    setStoredLayersNow(nextIndex);\n    dispatch(canvas.actions.setLayersNow(nextIndex));\n\n    initializeShape();\n  };\n\n  return (\n    <div\n      className={classNames(container)}\n      ref={canvasRef}\n      onMouseDown={(e) =>\n        e.button === 0 && !isStitching.current && onSetPoint(e)\n      }\n      onMouseUp={() => !isStitching.current && finishAdjustShape(false)}\n      onClick={(e) => isStitching.current && onSetPoint(e)}\n      onMouseMove={(e) => isDrawing.current && onAdjustShape(e)}\n      onDoubleClick={() => isStitching.current && finishAdjustShape(false)}\n      onKeyDown={(e) => e.key === \"Escape\" && finishAdjustShape(true)}\n      tabIndex=\"0\"\n    >\n      <Stage\n        className={classNames(stage)}\n        width={canvasContainer.width}\n        height={canvasContainer.height}\n      >\n        <Layer>\n          {shapes &&\n            shapes.map((shape, index) => {\n              if (shape?.type === \"line\") {\n                return (\n                  <Line\n                    stroke={shape.strokeColor}\n                    strokeWidth={shape.strokeWidth}\n                    points={shape.points}\n                    key={`${shape.type}-${index}`}\n                  ></Line>\n                );\n              }\n              if (shape?.type === \"spline\") {\n                return (\n                  <Line\n                    stroke={shape.strokeColor}\n                    strokeWidth={shape.strokeWidth}\n                    points={shape.points}\n                    tension={0.5}\n                    key={`${shape.type}-${index}`}\n                  ></Line>\n                );\n              }\n              if (shape?.type === \"ellipse\") {\n                return (\n                  <Ellipse\n                    fill={\n                      shape.fillColorTransparency\n                        ? \"transparent\"\n                        : shape.fillColor\n                    }\n                    stroke={shape.strokeColor}\n                    strokeWidth={shape.strokeWidth}\n                    x={shape.x}\n                    y={shape.y}\n                    width={shape.width}\n                    height={shape.height}\n                    key={`${shape.type}-${index}`}\n                  ></Ellipse>\n                );\n              }\n              if (shape?.type === \"rect\") {\n                return (\n                  <Rect\n                    fill={\n                      shape.fillColorTransparency\n                        ? \"transparent\"\n                        : shape.fillColor\n                    }\n                    stroke={shape.strokeColor}\n                    strokeWidth={shape.strokeWidth}\n                    x={shape.x}\n                    y={shape.y}\n                    width={shape.width}\n                    height={shape.height}\n                    key={`${shape.type}-${index}`}\n                  ></Rect>\n                );\n              }\n              if (shape?.type === \"polygon\") {\n                return (\n                  <Line\n                    fill={\n                      shape.fillColorTransparency\n                        ? \"transparent\"\n                        : shape.fillColor\n                    }\n                    stroke={shape.strokeColor}\n                    strokeWidth={shape.strokeWidth}\n                    points={shape.points}\n                    closed={true}\n                    key={`${shape.type}-${index}`}\n                  ></Line>\n                );\n              }\n            })}\n          {shapeType === \"line\" && (\n            <Line\n              stroke={strokeColor}\n              strokeWidth={strokeWidth}\n              points={shape.points}\n            ></Line>\n          )}\n          {shapeType === \"spline\" && (\n            <Line\n              stroke={strokeColor}\n              strokeWidth={strokeWidth}\n              points={shapePoints}\n              tension={0.5}\n            ></Line>\n          )}\n          {shapeType === \"ellipse\" && (\n            <Ellipse\n              fill={fillColorTransparency ? \"transparent\" : fillColor}\n              stroke={strokeColor}\n              strokeWidth={strokeWidth}\n              x={shape.x}\n              y={shape.y}\n              width={shape.width}\n              height={shape.height}\n            ></Ellipse>\n          )}\n          {shapeType === \"rect\" && (\n            <Rect\n              fill={fillColorTransparency ? \"transparent\" : fillColor}\n              stroke={strokeColor}\n              strokeWidth={strokeWidth}\n              x={shape.x}\n              y={shape.y}\n              width={shape.width}\n              height={shape.height}\n            ></Rect>\n          )}\n          {shapeType === \"polygon\" && (\n            <Line\n              fill={fillColorTransparency ? \"transparent\" : fillColor}\n              stroke={strokeColor}\n              strokeWidth={strokeWidth}\n              points={shapePoints}\n              closed={true}\n            ></Line>\n          )}\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\n\nexport default Canvas;\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable no-unused-vars */\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./Tool.module.scss\";\nimport { Button, CustomInput } from \"@/component\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { canvas } from \"@/store/canvas/canvas\";\nimport { useLocalStorage } from \"@/hook\";\n\nconst {\n  container,\n  shapeButtonBox,\n  customInputBox,\n  controlButtonBox,\n  guideBox,\n} = styles;\n\nconst Tool = () => {\n  const dispatch = useDispatch();\n  const {\n    shapes,\n    shapeType,\n    strokeColor,\n    strokeWidth,\n    fillColor,\n    fillColorTransparency,\n    layersHistory,\n    layersNow,\n    layersHistoryLimit,\n  } = useSelector((store) => store.canvas);\n\n  const [storedLayersHistory, setStoredLayersHistory] = useLocalStorage(\n    \"storedLayersHistory\",\n    []\n  );\n  const [storedLayersNow, setStoredLayersNow] = useLocalStorage(\n    \"storedLayersNow\",\n    -1\n  );\n\n  const setShapeButton = (type) => {\n    dispatch(canvas.actions.seShapeType(type));\n  };\n\n  const onChangeColor = (e, target) => {\n    dispatch(canvas.actions.setColor({ target, value: e.target.value }));\n  };\n\n  const onChangeFillColorOpacity = () => {\n    dispatch(canvas.actions.setFillColorTransparency());\n  };\n\n  const onChangeStrokeWidth = (e) => {\n    const value = parseInt(e.target.value);\n    dispatch(\n      canvas.actions.setStrokeWidth(value > 50 ? 50 : value < 5 ? 5 : value)\n    );\n  };\n\n  const undo = () => {\n    const prevIndex =\n      layersNow >= 0\n        ? layersNow > layersHistory.length - 1\n          ? layersHistory.length - 1\n          : layersNow - 1\n        : -1;\n\n    setStoredLayersNow(prevIndex);\n    dispatch(canvas.actions.setLayersNow(prevIndex));\n    dispatch(\n      canvas.actions.setShapes(prevIndex > -1 ? layersHistory[prevIndex] : [])\n    );\n  };\n\n  const redo = () => {\n    const nextIndex =\n      layersNow < layersHistory.length - 1\n        ? layersNow + 1\n        : layersHistory.length - 1;\n\n    setStoredLayersNow(nextIndex);\n    dispatch(canvas.actions.setLayersNow(nextIndex));\n    dispatch(\n      canvas.actions.setShapes(nextIndex > -1 ? layersHistory[nextIndex] : [])\n    );\n  };\n\n  const clearShapes = () => {\n    const newLayersHistory = layersHistory.filter(\n      (_, index) => index <= layersNow\n    );\n    newLayersHistory.push([]);\n\n    dispatch(canvas.actions.setShapes([]));\n    dispatch(canvas.actions.setLayersHitory(newLayersHistory));\n    setStoredLayersHistory(newLayersHistory);\n\n    const nextIndex =\n      layersNow + 1 < layersHistoryLimit - 1\n        ? layersNow + 1\n        : layersHistoryLimit - 1;\n    dispatch(canvas.actions.setLayersNow(nextIndex));\n    setStoredLayersNow(nextIndex);\n  };\n\n  const resetLayers = () => {\n    if (window.confirm(\"초기화 하시겠습니까?\")) {\n      dispatch(canvas.actions.setShapes([]));\n      dispatch(canvas.actions.setLayersHitory([]));\n      setStoredLayersHistory([]);\n      dispatch(canvas.actions.setLayersNow(-1));\n      setStoredLayersNow(-1);\n    }\n  };\n\n  return (\n    <div className={classNames(container)}>\n      <div className={classNames(shapeButtonBox)}>\n        <h3>드로잉 타입</h3>\n        <div>\n          <Button\n            onClick={() => setShapeButton(\"line\")}\n            isActive={shapeType === \"line\"}\n          >\n            직선\n          </Button>\n          <Button\n            onClick={() => setShapeButton(\"spline\")}\n            isActive={shapeType === \"spline\"}\n          >\n            곡선\n          </Button>\n          <Button\n            onClick={() => setShapeButton(\"ellipse\")}\n            isActive={shapeType === \"ellipse\"}\n          >\n            원\n          </Button>\n          <Button\n            onClick={() => setShapeButton(\"rect\")}\n            isActive={shapeType === \"rect\"}\n          >\n            직사각형\n          </Button>\n          <Button\n            onClick={() => setShapeButton(\"polygon\")}\n            isActive={shapeType === \"polygon\"}\n          >\n            다각형\n          </Button>\n        </div>\n      </div>\n      <div className={classNames(customInputBox)}>\n        <h3>드로잉 옵션</h3>\n        <div>\n          <CustomInput\n            inputId=\"strokeColor\"\n            onChange={(e) => onChangeColor(e, \"strokeColor\")}\n            value={strokeColor}\n            inputOption={{ type: \"color\" }}\n          >\n            테두리 색상\n          </CustomInput>\n          <CustomInput\n            inputId=\"strokeWidth\"\n            onChange={(e) => onChangeStrokeWidth(e)}\n            value={strokeWidth}\n            inputOption={{ type: \"number\", min: 5, max: 50 }}\n          >\n            테두리 두께\n          </CustomInput>\n          <CustomInput\n            inputId=\"fillColor\"\n            onChange={(e) => onChangeColor(e, \"fillColor\")}\n            value={fillColor}\n            inputOption={{ type: \"color\" }}\n          >\n            채우기 색상\n          </CustomInput>\n          <CustomInput\n            inputId=\"fillColorTransparency\"\n            onChange={onChangeFillColorOpacity}\n            value={0}\n            inputOption={{ type: \"checkbox\", checked: fillColorTransparency }}\n          >\n            채우기 없음\n          </CustomInput>\n        </div>\n      </div>\n      <div className={classNames(controlButtonBox)}>\n        <h3>편집</h3>\n        <div>\n          <Button onClick={undo} isActive={false} isDisable={layersNow < 0}>\n            undo\n          </Button>\n          <Button\n            onClick={redo}\n            isActive={false}\n            isDisable={layersNow >= layersHistory.length - 1}\n          >\n            redo\n          </Button>\n          <Button\n            onClick={() => shapes.length && clearShapes()}\n            isActive={false}\n            isDisable={!shapes.length}\n          >\n            clear\n          </Button>\n          <Button onClick={resetLayers} isActive={false}>\n            reset\n          </Button>\n        </div>\n      </div>\n      <div className={classNames(guideBox)}>\n        <h3>사용 정보</h3>\n        <ul>\n          <li>\n            <span>esc:</span>\n            <span>진행 중인 작업 취소</span>\n          </li>\n          <li>\n            <span>더블클릭:</span>\n            <span>진행 중인 작업(곡선, 다각형)을 해당 위치에서 완료</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Tool;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./Button.module.scss\";\n\nconst { button, active, disable } = styles;\n\nconst Button = ({ onClick, isActive, isDisable, style, children }) => {\n  return (\n    <button\n      onClick={onClick}\n      className={classNames(button, {\n        [active]: isActive,\n        [disable]: isDisable,\n      })}\n      disabled={isDisable}\n      style={style}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./CustomInput.module.scss\";\n\nconst { container } = styles;\n\nconst Input = ({ style, inputOption, inputId, onChange, value, children }) => {\n  return (\n    <div className={classNames(container)} style={style}>\n      <label htmlFor={inputId}>{children}</label>\n      <input id={inputId} onChange={onChange} value={value} {...inputOption} />\n    </div>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./App.module.scss\";\nimport { Canvas, Tool } from \"@/component\";\n\nconst { container } = styles;\n\nfunction App() {\n  return (\n    <div className={classNames(container)}>\n      <Canvas></Canvas>\n      <Tool></Tool>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { canvas } from \"./canvas/canvas\";\n\nexport const store = configureStore({\n  reducer: {\n    canvas: canvas.reducer,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"@/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}